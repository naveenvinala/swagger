openapi: 3.0.0
info:
  title: Sample Book Mangement App
  description: This is a sample server for a pet store.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1

servers:
  - url: http://localhost:4000/api/v1
  - url: http://dev-api.example.com

paths:
  /delete_book/{id}:
    delete:
      summary: "delete book by Id"
      description: Deletes the book in store.
      operationId: deleteBookById
      parameters:
        - name: id
          in: path
          description: Book ID to Delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: The resource was deleted successfully.
        404:
          $ref: "#/components/responses/NotFound"


  /update_book/{id}:
    put:
      summary: "Update book by Id"
      description: Updates the book in store.
      operationId: updateBookById
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          schema:
            type: string
      requestBody:
        description: Id is auto genrated so add title & author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
            examples:
              book:
                $ref: "#/components/examples/book"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#components/examples/books"
        404:
          $ref: "#/components/responses/NotFound"

  /get_book/{id}:
    get:
      summary: "Get all books from the store by Id"
      description: A detailed description of the operation.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Book"
        404:
          $ref: "#/components/responses/NotFound"

  /get_books:
    get:
      security:
        - bearerAuth: []
      summary: "Get all books from the store"
      responses:
        200:
          description: "successful retrieved"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Books"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

  /create_book:
    post:
      summary: Add a new book
      requestBody:
        description: Id is auto genrated so add title & author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
            examples:
              book:
                $ref: "#/components/examples/book"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#components/examples/books"
        500:
          description: Internal Server Error
        default:
          description: Unexpected error

components:
  schemas:
    Books:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          title:
            type: string
          author:
            type: string
        required:
          - title
          - author

    Book:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
      required:
        - title
        - author
      # Schema for error response body

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  examples:
    books:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
    book:
      value:
        title: book_title
        author: book_author

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
